#version 430

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct Particle
{
    vec3 position;
    float lifetime;
    vec3 velocity; 
    float life_length;
};

layout(std430, binding = 0) restrict buffer ParticleBuffer
{
    Particle particles[];
};

layout(std430, binding = 1) restrict buffer CounterBuffer  
{
    uint alive_count;
    uint dead_count;
    uint total_count;
    uint padding; // 4字节对齐
};


// Uniform variable
uniform float u_deltaTime;
uniform uint u_maxParticles;

uniform float u_gravity;
uniform float u_dragCoeff;
uniform float u_particleMass;

uniform bool u_hasFlowField;
uniform float u_flowInfluence;
uniform sampler3D u_flowFieldTexture;
uniform vec3 u_flowFieldWorldMin;
uniform vec3 u_flowFieldWorldMax;

///////////////////////////////////////////////////////////////////////////////
// Particle data access helper functions
///////////////////////////////////////////////////////////////////////////////
vec3 getPosition(uint index) 
{
    return particles[index].position;
}

void setPosition(uint index, vec3 pos) 
{
    particles[index].position = pos;
}

float getLifetime(uint index) {
     return particles[index].lifetime;
}

void setLifetime(uint index, float lifetime) 
{
    particles[index].lifetime = lifetime;
}

vec3 getVelocity(uint index) 
{
    return particles[index].velocity;
}

void setVelocity(uint index, vec3 velocity) 
{
    particles[index].velocity = velocity;
}

float getLifeLength(uint index) 
{
    return particles[index].life_length;
}

///////////////////////////////////////////////////////////////////////////////
// Flow Field function
///////////////////////////////////////////////////////////////////////////////

vec3 sampleFlowField(vec3 worldPosition) 
{
    if (!u_hasFlowField) 
    {
        return vec3(0.0);
    }
    
    // Convert world coordinates to texture coordinates
    vec3 normalizedPos = (worldPosition - u_flowFieldWorldMin) / 
                        (u_flowFieldWorldMax - u_flowFieldWorldMin);
    
    // Bounds Checking
    if (any(lessThan(normalizedPos, vec3(0.0))) || 
        any(greaterThan(normalizedPos, vec3(1.0)))) 
    {
        return vec3(0.0); // Out of flow range
    }
    
    // 3D texture sampling (automatic trilinear interpolation by GPU hardware)
    vec4 flowSample = texture(u_flowFieldTexture, normalizedPos);
    return flowSample.xyz;
}

///////////////////////////////////////////////////////////////////////////////
// Physical calculation function
///////////////////////////////////////////////////////////////////////////////

vec3 calculateGravity(float mass, float gravity) 
{
    return vec3(0.0, -gravity * mass, 0.0);
}

vec3 calculateDrag(vec3 velocity, float dragCoeff) 
{
    float velocityMag = length(velocity);
    if (velocityMag < 1e-6) return vec3(0.0);
    
    vec3 velocityNorm = velocity / velocityMag;
    return -dragCoeff * velocityMag * velocityNorm;
}

void updatePhysics(inout vec3 position, inout vec3 velocity, float deltaTime, 
                   float mass, float gravity, float dragCoeff) 
{
    vec3 currentVel = velocity;
    
    // Gravity contribution
    vec3 gravityAccel = vec3(0.0, -gravity, 0.0);
    vec3 gravityContrib = gravityAccel * deltaTime;

    // Flow field influence
    vec3 flowVelocity = sampleFlowField(position);
    vec3 flowForce = u_flowInfluence * (flowVelocity - currentVel);
    vec3 flowContrib = (flowForce / mass) * deltaTime;
    
    // Damping coefficient (implicit Euler integration)
    float dampingFactor = 1.0 + deltaTime * (dragCoeff / mass);
    
    // Update rate (implicit Euler method)
    vec3 newVelocity = (currentVel + gravityContrib + flowContrib) / dampingFactor;
    
    // Update Location
    position += deltaTime * newVelocity;
    velocity = newVelocity;
}

///////////////////////////////////////////////////////////////////////////////
// Main
///////////////////////////////////////////////////////////////////////////////
void main()
{
    uint index = gl_GlobalInvocationID.x;
    
    if (index >= u_maxParticles || index >= total_count) 
    {
        return;
    }

    // Get particle data
    vec3 position = getPosition(index);
    float lifetime = getLifetime(index);
    vec3 velocity = getVelocity(index);
    float lifeLength = getLifeLength(index);

    if (lifetime < 0.0) 
    {
        return;
    }

    updatePhysics(position, velocity, u_deltaTime, u_particleMass, u_gravity, u_dragCoeff);
    lifetime += u_deltaTime;

    // Check if the particle should die
    if (lifetime > lifeLength) 
    {
        // Mark as dead
        lifetime = -1.0;
        // 原子操作更新死亡计数
        atomicAdd(dead_count, 1u);
        atomicAdd(alive_count, uint(-1));
    } 

    setPosition(index, position);
    setLifetime(index, lifetime);
    setVelocity(index, velocity);
}